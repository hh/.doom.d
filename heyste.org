:DOC-CONFIG:
# Tangle by default to config.el, which is the most common case
#+property: header-args:emacs-lisp :tangle config.el
#+property: header-args:elisp+ :results silent :tangle config.el
#+property: header-args :mkdirp yes :comments no
#+startup: fold
:END:

#+title: Heyste's Doom Config
#+author: Stephen Heywood
#+email: stephen@ii.coop
#+attr_html: :style max-width:30%;

Much of this file just includes the parts of the main ii.org config I'm interested in.
For some I comment on my thoughts, but mainly I just used the coop defaults and set a few personal items at the end.
This should allow everyone to do something similar!

#+html: <details><summary>init.el</summary>
#+begin_src emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at
;; https://github.com/humacs/.doom.d/-/blob/master/config.org
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a "Module Index" link where you'll find
;;      a comprehensive list of Doom's modules and what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).
#+end_src
#+html: </details>

#+html: <details><summary>packages.el</summary>
#+begin_src emacs-lisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at
;; https://gitlab.com/zzamboni/dot-doom/-/blob/master/doom.org
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.

;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;;(package! some-package)

;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/raxod502/straight.el#the-recipe-format
;;(package! another-package
;;  :recipe (:host github :repo "username/repo"))

;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;;(package! this-package
;;  :recipe (:host github :repo "username/repo"
;;           :files ("some-file.el" "src/lisp/*.el")))

;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;;(package! builtin-package :disable t)

;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;;(package! builtin-package :recipe (:nonrecursive t))
;;(package! builtin-package-2 :recipe (:repo "myfork/package"))

;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see raxod502/straight.el#279)
;;(package! builtin-package :recipe (:branch "develop"))

;; Use `:pin' to specify a particular commit to install.
;;(package! builtin-package :pin "1a2b3c4d5e")

;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;;(unpin! pinned-package)
;; ...or multiple packages
;;(unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;;(unpin! t)
#+end_src
#+html: </details>

#+html: <details><summary>config.el</summary>
#+begin_src emacs-lisp :tangle config.el
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at
;; https://gitlab.com/zzamboni/dot-doom/-/blob/master/doom.org
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
;; (setq user-full-name "John Doe"
;;      user-mail-address "john@doe.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
;; (setq doom-theme 'doom-one)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
;; (setq org-directory "~/org/")

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
;; (setq display-line-numbers-type t)

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
#+end_src
#+html: </details>


#+BEGIN_SRC elisp
(setq user-full-name "Stephen Heywood"
      user-mail-address "stephen@ii.coop")
#+END_SRC

* Ergonomics
** Better Local Leaders
I got used to using comma as the localleader key, from spacemacs, so i keep it.

#+BEGIN_SRC elisp
(setq doom-localleader-key ",")
#+END_SRC

** Use mouse scroll
#+BEGIN_SRC elisp
 (defun scroll-up-5-lines ()
    "Scroll up 5 lines"
    (interactive)
    (scroll-up 5))

  (defun scroll-down-5-lines ()
    "Scroll down 5 lines"
    (interactive)
    (scroll-down 5))

  (global-set-key (kbd "<mouse-4>") 'scroll-down-5-lines)
  (global-set-key (kbd "<mouse-5>") 'scroll-up-5-lines)
#+END_SRC

** lispy vim
This sets up keybindings for manipuulating parenthesis with slurp and barf when in normal or visual mode.

#+NAME: Setup Lispy Vim Bindings
#+BEGIN_SRC elisp
(map!
 :map smartparens-mode-map
 :nv ">" #'sp-forward-slurp-sexp
 :nv "<" #'sp-forward-barf-sexp
 :nv "}" #'sp-backward-barf-sexp
 :nv "{" #'sp-backward-slurp-sexp)
#+END_SRC


* Appearance
** Fonts

Doom exposes five (optional) variables for controlling fonts in Doom. Here are the three important ones:

#+BEGIN_SRC elisp
(setq doom-font (font-spec :family "Source Code Pro" :size 10)
      ;; )(font-spec :family "Source Code Pro" :size 8 :weight 'semi-light)
      doom-serif-font (font-spec :family "Source Code Pro" :size 10)
      doom-variable-pitch-font (font-spec :family "Source Code Pro" :size 10)
      doom-unicode-font (font-spec :family "Input Mono Narrow" :size 12)
      doom-big-font (font-spec :family "Source Code Pro" :size 10))
#+END_SRC

** Theme

#+BEGIN_SRC elisp
(setq doom-theme 'doom-gruvbox)
#+END_SRC

** Indent

#+BEGIN_SRC elisp
(setq standard-indent 2)
#+END_SRC

** LSP Behaviour

This brings over the lsp behaviour of spacemacs, so working with code feels consistent across emacs..

#+NAME: Setup LSP-UI
#+BEGIN_SRC elisp
(use-package! lsp-ui
:config
          (setq lsp-navigation 'both)
          (setq lsp-ui-doc-enable t)
          (setq lsp-ui-doc-position 'top)
          (setq lsp-ui-doc-alignment 'frame)
          (setq lsp-ui-doc-use-childframe t)
          (setq lsp-ui-doc-use-webkit t)
          (setq lsp-ui-doc-delay 0.2)
          (setq lsp-ui-doc-include-signature nil)
          (setq lsp-ui-sideline-show-symbol t)
          (setq lsp-ui-remap-xref-keybindings t)
          (setq lsp-ui-sideline-enable t)
          (setq lsp-prefer-flymake nil)
          (setq lsp-print-io t))
#+END_SRC

* Languages
** Web

auto-closing tags works different if you are in a terminal or gui.  We want consistent behaviour when editing any sort of web doc.
I also like it to create a closing tag when i've starteed my opening tag, which is auto-close-style 2

#+BEGIN_SRC elisp
(setq web-mode-enable-auto-closing t)
(setq-hook! web-mode web-mode-auto-close-style 2)
#+END_SRC

** Go

Go is enabled, with LSP support in our [[file:init.el][init.el]].  To get it working properly, though, you want to ensure you have all the go dependencies installed on your computer and your GOPATH set. It's recommended you read the doom docs on golang, following all links to ensure your dependencies are up to date.
[[file:~/humacs/doom-emacs/modules/lang/go/README.org][Go Docs]]

I've had inconsistencies with having the GOPATH set on humacs boxes, so if we are in a humacs pod, explicitly set the GOPATH

#+NAME: Set GOPATH on humacs boxes
#+BEGIN_SRC elisp
(when (and (getenv "HUMACS_PROFILE") (not (getenv "GOPATH")))
  (setenv "GOPATH" (concat (getenv "HOME") "/go")))
#+END_SRC

** Vue

Tried out vue-mode, but it was causing more problems than benefits and doesn't seem to do much beyond what web-mode plus vue-lsp support would do.
So, following [[https://genehack.blog/2020/08/web-mode-eglot-vetur-vuejs-=-happy/][Gene Hack's Blog Post]], we'll create our own mode, that just inherits all of web-mode and adds lsp.
This requires for [[https://npmjs.com/vls][vls]] to be installed.

#+BEGIN_SRC elisp
(define-derived-mode ii-vue-mode web-mode "iiVue"
  "A major mode derived from web-mode, for editing .vue files with LSP support.")
(add-to-list 'auto-mode-alist '("\\.vue\\'" . ii-vue-mode))
(add-hook 'ii-vue-mode-hook #'lsp!)
#+END_SRC

* Org

Various settings specific to org-mode to satisfy our preferences

** Show properties when cycling through subtrees

This is an adjustment to the default hook, which hides drawers by default

#+BEGIN_SRC elisp
(setq org-cycle-hook
      ' (org-cycle-hide-archived-subtrees
         org-cycle-show-empty-lines
         org-optimize-window-after-visibility-change))
#+END_SRC

** ASCII colours on shell results

#+BEGIN_SRC elisp
(defun ek/babel-ansi ()
  (when-let ((beg (org-babel-where-is-src-block-result nil nil)))
    (save-excursion
      (goto-char beg)
      (when (looking-at org-babel-result-regexp)
        (let ((end (org-babel-result-end))
              (ansi-color-context-region nil))
          (ansi-color-apply-on-region beg end))))))
(add-hook 'org-babel-after-execute-hook 'ek/babel-ansi)
#+END_SRC

** Power up Org Experience

#+begin_src elisp
(setq org-ellipsis " ▼")
(setq org-superstar-headline-bullets-list '("◉" "○" "◉" "○"))

(after! org
  (setq org-tags-column -80))

;; (use-package! org-roam-protocol
;;  :after org-protocol)
;; (use-package! org-transclusion
;;  :after org-roam)
#+end_src

** org-id creation on org-store-link
:PROPERTIES:
:CUSTOM_ID: org-id-creation-on-org-store-link
:END:


#+begin_src elisp
(setq org-id-link-to-org-use-id
      'create-if-interactive-and-no-custom-id)
#+end_src

#+begin_src elisp
(defun ii/make-id-for-title (title)
  "Return an ID based on TITLE."
  (let* ((new-id (replace-regexp-in-string "[^[:alnum:]]" "-" (downcase title))))
    new-id))

(defun ii/org-custom-id-create ()
  "Create and store CUSTOM_ID for current heading."
  (let* ((title (or (nth 4 (org-heading-components)) ""))
         (new-id (ii/make-id-for-title title)))
    (org-entry-put nil "CUSTOM_ID" new-id)
    (org-id-add-location new-id (buffer-file-name (buffer-base-buffer)))
    new-id))

(defun ii/org-custom-id-get-create (&optional where force)
  "Get or create CUSTOM_ID for heading at WHERE.

If FORCE is t, always recreate the property."
  (org-with-point-at where
    (let ((old-id (org-entry-get nil "CUSTOM_ID")))
      ;; If CUSTOM_ID exists and FORCE is false, return it
      (if (and (not force) old-id (stringp old-id))
          old-id
        ;; otherwise, create it
        (ii/org-custom-id-create)))))

;; Now override counsel-org-link-action
(after! counsel
  (defun counsel-org-link-action (x)
    "Insert a link to X.

X is expected to be a cons of the form (title . point), as passed
by `counsel-org-link'.

If X does not have a CUSTOM_ID, create it based on the headline
title."
    (let* ((id (ii/org-custom-id-get-create (cdr x))))
      (org-insert-link nil (concat "#" id) (car x)))))
#+end_src

#+begin_src elisp
(setq org-id-link-to-org-use-id
      'create-if-interactive-and-no-custom-id)
#+end_src

#+begin_src elisp
(defun ii/make-id-for-title (title)
  "Return an ID based on TITLE."
  (let* ((new-id (replace-regexp-in-string "[^[:alnum:]]" "-" (downcase title))))
    new-id))

(defun ii/org-custom-id-create ()
  "Create and store CUSTOM_ID for current heading."
  (let* ((title (or (nth 4 (org-heading-components)) ""))
         (new-id (ii/make-id-for-title title)))
    (org-entry-put nil "CUSTOM_ID" new-id)
    (org-id-add-location new-id (buffer-file-name (buffer-base-buffer)))
    new-id))

(defun ii/org-custom-id-get-create (&optional where force)
  "Get or create CUSTOM_ID for heading at WHERE.

If FORCE is t, always recreate the property."
  (org-with-point-at where
    (let ((old-id (org-entry-get nil "CUSTOM_ID")))
      ;; If CUSTOM_ID exists and FORCE is false, return it
      (if (and (not force) old-id (stringp old-id))
          old-id
        ;; otherwise, create it
        (ii/org-custom-id-create)))))

;; Now override counsel-org-link-action
(after! counsel
  (defun counsel-org-link-action (x)
    "Insert a link to X.

X is expected to be a cons of the form (title . point), as passed
by `counsel-org-link'.

If X does not have a CUSTOM_ID, create it based on the headline
title."
    (let* ((id (ii/org-custom-id-get-create (cdr x))))
      (org-insert-link nil (concat "#" id) (car x)))))
#+end_src

* Literate!
** SQL

#+BEGIN_SRC elisp
(setq org-babel-default-header-args:sql-mode
      '((:results . "replace code")
        (:product . "postgres")
        (:wrap . "SRC example")))
#+END_SRC

** Go
#+BEGIN_SRC elisp
(setq org-babel-default-header-args:go
      '((:results . "replace code")
        (:wrap . "SRC example")))
#+END_SRC

** OSC52 (copy over ssh/terminal)

#+BEGIN_SRC elisp
(after! osc52e
  (osc52-set-cut-function)
  )
#+END_SRC

** Pairing

#+BEGIN_SRC elisp
(use-package! graphviz-dot-mode)
(use-package! sql)
(use-package! sql-indent)
(use-package! osc52e)
(use-package! iterm)
(use-package! ob-tmate)
;; (use-package! bigquery-mode)
#+END_SRC

** Exporting

#+BEGIN_SRC elisp
(require 'ox-gfm)
#+END_SRC

** Sane Org Defaults

In addition to the org defaults, we wanna make sure our exports include results, but that we dont' try to run all our tamte commands again.

#+BEGIN_SRC elisp
(setq org-babel-default-header-args
      '((:session . "none")
        (:results . "replace code")
        (:comments . "org")
        (:exports . "both")
        (:eval . "never-export")
        (:tangle . "no")))

(setq org-babel-default-header-args:shell
      '((:results . "output code verbatim replace")
        (:wrap . "example")))
#+END_SRC

** Support Big Query

If you run into issues with legacy vs standard sql, add the following to =~/.bigqueryrc=
https://cloud.google.com/bigquery/docs/reference/standard-sql/enabling-standard-sql#bq

#+begin_src config :tangle no
[query]
--use_legacy_sql=false

[mk]
--use_legacy_sql=false
#+end_src

* Snippets

These are helpful text expanders made with yasnippet

** org-mode
*** Blog Property

Creates a property drawer with all the necessary info for our blog.

#+BEGIN_SRC snippet :tangle snippets/org-mode/blog
# -*- snippet -*-
# name: blog
# key: <blog
# --
,** ${1:Enter Title}
   :PROPERTIES:
   :EXPORT_FILE_NAME:  ${1:$(downcase(replace-regexp-in-string " " "-" yas-text))}
   :EXPORT_DATE: `(format-time-string "%Y-%m-%d")`
   :EXPORT_HUGO_MENU: :menu "main"
   :EXPORT_HUGO_CUSTOM_FRONT_MATTER: :summary "${2:No Summary Provided}"
   :END:
   ${3:"Enter Tags"$(unless yas-modified-p (progn (counsel-org-tag)(kill-whole-line)))}
#+END_SRC

* Dashboard
** Banners

#+begin_src elisp
(setq
      ;; user-banners-dir
      ;; doom-dashboard-banner-file "img/kubemacs.png"
      doom-dashboard-banner-dir (concat doom-private-dir (convert-standard-filename "/banners/"))
      doom-dashboard-banner-file "img/kubemacs.png"
      fancy-splash-image (concat doom-dashboard-banner-dir doom-dashboard-banner-file)
      )
#+end_src

* ii tools
** ssh find agent

#+BEGIN_SRC elisp
(defun ssh-find-agent ()
"Look for a running SSH agent on the host machine, and set it as our SSH_AUTH_SOCK.
This is useful for pushing changes to git repos using your ssh key, or for tramping in an org file to a remote machine.
It assumes you've added an ssh-agent and, if on a remote machine, forwarded it to that machine.
For more info, see: https://www.ssh.com/ssh/agent
This function is INTERACTIVE."
  (interactive)
  (setenv "SSH_AUTH_SOCK" (shell-command-to-string "find /tmp /run/host/tmp/ -type s -regex '.*/ssh-.*/agent..*$' 2> /dev/null | tail -n 1 | tr -d '\n'"))
  (message (getenv "SSH_AUTH_SOCK")))
#+END_SRC

** Timesheets

#+NAME: iso-week-to-time
#+BEGIN_SRC elisp
(defun iso-week-to-time (year week day)
  (pcase-let ((`(,m ,d ,y)
               (calendar-gregorian-from-absolute
                (calendar-iso-to-absolute (list week day year)))))
    (encode-time 0 0 0 d m y)))

(define-skeleton ii-timesheet-skel
  "Prompt the week and year before generating ii timesheet for the user."
  ""
  (text-mode)
  > "#+TITLE: Timesheet: Week " (setq v1 (skeleton-read "Timesheet Week? "))
  ", " (setq v2 (format-time-string "%Y"))
  " (" (getenv "USER") ")" \n
  > "#+AUTHOR: " (getenv "USER") \n
  > " " \n
  > "Please refer to the instructions in ii-timesheet.org as required." \n
  > " " \n
  > "* Week Summary" \n
  > " " _ \n
  > "#+BEGIN: clocktable :scope file :block " (message v2) "-W" (message v1) " :maxlevel 2 :emphasise t :tags t :formula %" \n
  > "#+END" \n
  > " " \n

  > "* " (format-time-string "%B %e, %Y" (iso-week-to-time (string-to-number v2) (string-to-number v1) 1)) \n
  > "** Task X" \n
  > "* " (format-time-string "%B %e, %Y" (iso-week-to-time (string-to-number v2) (string-to-number v1) 2)) \n
  > "** Task X" \n
  > "* " (format-time-string "%B %e, %Y" (iso-week-to-time (string-to-number v2) (string-to-number v1) 3)) \n
  > "** Task X" \n
  > "* " (format-time-string "%B %e, %Y" (iso-week-to-time (string-to-number v2) (string-to-number v1) 4)) \n
  > "** Task X" \n
  > "* " (format-time-string "%B %e, %Y" (iso-week-to-time (string-to-number v2) (string-to-number v1) 5)) \n
  > "** Task X" \n
  > " " \n
  (org-mode)
  (save-buffer))
#+END_SRC

#+NAME: ii-timesheet
#+BEGIN_SRC elisp
(defun ii-timesheet ()
  "Create a timesheet buffer and insert skel as defined in ii-timesheet-skel.
   This function is INTERACTIVE."
  (interactive)
  (require 'cal-iso)
  (switch-to-buffer (get-buffer-create "*ii-timesheet*"))
  (ii-timesheet-skel))
#+END_SRC

* Startup Buffers

#+BEGIN_SRC elisp
(setq inhibit-startup-screen nil
      startup-screen-inhibit-startup-screen nil
      )
#+END_SRC

* packages.el
** Theme Packages

#+BEGIN_SRC elisp :tangle packages.el
(message "humacs doom-config/packages.el")
(package! almost-mono-themes)
#+END_SRC

** Org Packages

#+BEGIN_SRC elisp :tangle packages.el
(package! ob-sql-mode)
(package! ob-elixir)
(package! ob-tmux)
(package! ox-gfm) ; org dispatch github flavoured markdown

;; (package! org-transclusion
;;   :recipe (:local-repo "local/org-transclusion"))
#+END_SRC

** Language Packages

#+BEGIN_SRC elisp :tangle packages.el
(package! sql)
(package! sql-indent)

;; (package! bigquery-mode
;;    :recipe (:local-repo "local/bigquery-mode"))

(package! graphviz-dot-mode)
(package! feature-mode)
(package! kubernetes)
(package! kubernetes-evil)
;; :build (:not compile) so we can edit in place
#+END_SRC

** Pairing Packages

#+BEGIN_SRC elisp :tangle packages.el
(package! osc52e
  :recipe (:local-repo "local/osc52e"
           :build (:not compile) ; for recent doom versions
           ; :no-byte-compile t ; for older doom versions
           ))
(package! iterm
  :recipe (:local-repo "local/iterm"
           :build (:not compile)
           ))
(package! ob-tmate
   :recipe (:local-repo "local/ob-tmate"
            :build (:not compile)
           ))
#+END_SRC

** More Packages

#+BEGIN_SRC elisp :tangle packages.el
(package! exec-path-from-shell)
(package! tomatinho)
#+END_SRC

* init.el
** doom!heading

#+BEGIN_SRC elisp :tangle init.el
;; ~/humacs/doom-config/default-init.el -*- lexical-binding: t; -*-
(message "humacs doom-config/init.el")
(doom!
#+END_SRC

** doom!input

#+BEGIN_SRC elisp :tangle init.el
:input
;;chinese
;;japanese
#+END_SRC

** doom!os

#+BEGIN_SRC elisp :tangle init.el
:os
macos             ; MacOS-specific commands
(tty +osc)
#+END_SRC

** doom!completion

#+BEGIN_SRC elisp :tangle init.el
:completion
company           ; the ultimate code completion backend
helm              ; the *other* search engine for love and life
;;ido             ; the other *other* search engine...
ivy               ; a search engine for love and life
#+END_SRC

** doom!ui

#+BEGIN_SRC elisp :tangle init.el
:ui
deft                ; notational velocity for Emacs
doom                ; what makes DOOM look the way it does
doom-dashboard      ; a nifty splash screen for Emacs
doom-quit           ; DOOM quit-message prompts when you quit Emacs
;;(emoji +unicode)  ; 🙂
;;fill-column       ; a `fill-column' indicator
hl-todo             ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
;;hydra
;;indent-guides     ; highlighted indent columns
;;ligatures         ; ligatures and symbols to make your code pretty again
;;minimap           ; show a map of the code on the side
modeline            ; snazzy, Atom-inspired modeline, plus API
;;nav-flash         ; blink cursor line after big motions
;;neotree           ; a project drawer, like NERDTree for vim
ophints             ; highlight the region an operation acts on
(popup +defaults)   ; tame sudden yet inevitable temporary windows
;;tabs              ; a tab bar for Emacs
treemacs            ; a project drawer, like neotree but cooler
unicode             ; extended unicode support for various languages
window-select       ; visually switch windows
vc-gutter           ; vcs diff in the fringe
vi-tilde-fringe     ; fringe tildes to mark beyond EOB
workspaces          ; tab emulation, persistence & separate workspaces
zen                 ; distraction-free coding or writing
#+END_SRC

** doom!editor

#+BEGIN_SRC elisp :tangle init.el
:editor
(evil +everywhere)  ; come to the dark side, we have cookies
file-templates      ; auto-snippets for empty files
fold                ; (nigh) universal code folding
(format +onsave)    ; automated prettiness
;;god               ; run Emacs commands without modifier keys
;;lispy             ; vim for lisp, for people who don't like vim
multiple-cursors    ; editing in many places at once
;;objed             ; text object editing for the innocent
;;parinfer          ; turn lisp into python, sort of
;;rotate-text       ; cycle region at point between text candidates
snippets            ; my elves. They type so I don't have to
word-wrap           ; soft wrapping with language-aware indent
#+END_SRC

** doom!emacs

#+BEGIN_SRC elisp :tangle init.el
:emacs
dired             ; making dired pretty [functional]
electric          ; smarter, keyword-based electric-indent
ibuffer           ; interactive buffer management
(undo +tree)      ; persistent, smarter undo for your inevitable mistakes
vc                ; version-control and Emacs, sitting in a tree
#+END_SRC

** doom!term

#+BEGIN_SRC elisp :tangle init.el
:term
;; eshell           ; the elisp shell that works everywhere
;;shell             ; simple shell REPL for Emacs
;;term              ; basic terminal emulator for Emacs
;;vterm             ; the best terminal emulation in Emacs
#+END_SRC

** doom!checkers

#+BEGIN_SRC elisp :tangle init.el
:checkers
syntax              ; tasing you for every semicolon you forget
;;spell             ; tasing you for misspelling mispelling
;;grammar           ; tasing grammar mistake every you make
#+END_SRC

** doom!tools

#+BEGIN_SRC elisp :tangle init.el
:tools
;;ansible
debugger            ; FIXME stepping through code, to help you add bugs
direnv
docker
editorconfig        ; let someone else argue about tabs vs spaces
ein                 ; tame Jupyter notebooks with emacs
(eval +overlay)     ; run code, run (also, repls)
;;gist              ; interacting with github gists
lookup              ; navigate your code and its documentation
(lsp +peek)
magit               ; a git porcelain for Emacs
make                ; run make tasks from Emacs
pass                ; password manager for nerds
;; pdf              ; pdf enhancements
;;prodigy           ; FIXME managing external services & code builders
rgb                 ; creating color strings
;;taskrunner        ; taskrunner for all your projects
terraform           ; infrastructure as code
tmux                ; an API for interacting with tmux
;;upload            ; map local to remote projects via ssh/ftp
#+END_SRC

** doom!lang

#+BEGIN_SRC elisp :tangle init.el
:lang
;;agda              ; types of types of types of types...
;;cc                ; C/C++/Obj-C madness
clojure             ; java with a lisp
;;common-lisp       ; if you've seen one lisp, you've seen them all
;;coq               ; proofs-as-programs
;;crystal           ; ruby at the speed of c
;;csharp            ; unity, .NET, and mono shenanigans
;;data              ; config/data formats
;;(dart +flutter)   ; paint ui and not much else
elixir              ; erlang done right
;;elm               ; care for a cup of TEA?
emacs-lisp          ; drown in parentheses
erlang              ; an elegant language for a more civilized age
;;ess               ; emacs speaks statistics
;;faust             ; dsp, but you get to keep your soul
;;fsharp            ; ML stands for Microsoft's Language
;;fstar             ; (dependent) types and (monadic) effects and Z3
;;gdscript          ; the language you waited for
(go +lsp)           ; the hipster dialect
;;(haskell +dante)  ; a language that's lazier than I am
;;hy                ; readability of scheme w/ speed of python
;;idris             ;
json                ; At least it ain't XML
;;(java +meghanada) ; the poster child for carpal tunnel syndrome
javascript          ; all(hope(abandon(ye(who(enter(here))))))
;;julia             ; a better, faster MATLAB
;;kotlin            ; a better, slicker Java(Script)
latex               ; writing papers in Emacs has never been so fun
;;lean
;;factor
;;ledger            ; an accounting system in Emacs
lua                 ; one-based indices? one-based indices
markdown            ; writing docs for people to ignore
;;nim               ; python + lisp at the speed of c
;;nix               ; I hereby declare "nix geht mehr!"
;;ocaml             ; an objective camel
;; org              ; organize your plain life in plain text
;; (org +pretty )

(org                ; organize your plain life in plain text
 +pomodoro          ; timer for time
 +hugo              ; export the pretty
 +hugo              ; export the pretty
 +pretty            ; yessss my pretties! (nice unicode symbols)
 +pandoc            ; export-with-pandoc support
 +present           ; using org-mode for presentations
 +roam)             ; wander around notes

;;php               ; perl's insecure younger brother
plantuml            ; diagrams for confusing people more
;;purescript        ; javascript, but functional
python              ; beautiful is better than ugly
;;qt                ; the 'cutest' gui framework ever
racket              ; a DSL for DSLs
;;raku              ; the artist formerly known as perl6
;;rest              ; Emacs as a REST client
;;rst               ; ReST in peace
(ruby +rails)       ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
;;rust              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
;;scala             ; java, but good
;;scheme            ; a fully conniving family of lisps
sh                  ; she sells {ba,z,fi}sh shells on the C xor
;;sml
;;solidity          ; do you need a blockchain? No.
;;swift             ; who asked for emoji variables?
;;terra             ; Earth and Moon in alignment for performance.
web                 ; the tubes
yaml                ; JSON, but readable
#+END_SRC

** doom!email

#+BEGIN_SRC elisp :tangle init.el
:email
;;(mu4e +gmail)
;;notmuch
;;(wanderlust +gmail)
#+END_SRC

** doom!app

#+BEGIN_SRC elisp :tangle init.el
:app
calendar
irc                 ; how neckbeards socialize
(rss +org)          ; emacs as an RSS reader
;;twitter           ; twitter client https://twitter.com/vnought
#+END_SRC

** doom!config

#+BEGIN_SRC elisp :tangle init.el
:config
;; literate ; disabled because we use org-tangle $USER.org
(default +bindings +smartparens)
;; Note we need this last paren to close out the (doom!... sexp)
)
#+END_SRC

* Org-roam
** General Settings

- Set location
- Make sure the buffer window for back links isn't to big

#+begin_src elisp
(setq org-directory (concat (getenv "HOME") "/ii/roam"))
(setq org-roam-directory (concat (getenv "HOME") "/ii/roam/"))
(setq org-roam-db-location "/tmp/org-roam.db")
(setq org-roam-buffer-width 0.2)
#+end_src

** Shortcuts for Dailies

Let's get make it super easy to focus

#+begin_src elisp
(map! "<f7>" #'org-roam-dailies-find-today
      "<C-f7>" #'org-roam-dailies-find-tomorrow
      "<S-f7>" #'org-roam-dailies-find-yesterday
      "<C-S-f7>" #'org-roam-dailies-find-date)
#+end_src

** Shortcuts: find/insert

#+begin_src elisp
(map! "<f5>" #'org-roam-find-file
      "<f8>" #'org-roam-insert)
#+end_src

** Shortcuts: maintenance

#+begin_src elisp
(map! "<f12>" #'org-roam-buffer-toggle-display
      "<C-f12>" #'org-roam-db-build-cache)
#+end_src

** Graph Shortcuts/Settings

Provide a visual overview of my documents. Increase the view from the current document :)

#+begin_src elisp
(defun heyste/graph-buffer-single-jump ()
  "Invoke 'org-roam-graph--open' with the current buffer only for a single jump"
  (interactive)
  (org-roam-graph 1 (buffer-file-name (buffer-base-buffer)) 1)
  )

(defun heyste/graph-buffer-double-jump ()
  "Invoke 'org-roam-graph--open' with the current buffer a double jump"
  (interactive)
  (org-roam-graph 2 (buffer-file-name (buffer-base-buffer)) 2)
  )

(defun heyste/graph-buffer-triple-jump ()
  "Invoke 'org-roam-graph--open' with the current buffer a double jump"
  (interactive)
  (org-roam-graph 3 (buffer-file-name (buffer-base-buffer)) 3)
  )

(map! "<f9>" #'heyste/graph-buffer-single-jump
      "<C-f9>" #'heyste/graph-buffer-double-jump
      "<S-f9>" #'heyste/graph-buffer-triple-jump
      "<C-S-f9>" #'org-roam-graph) ;; show every org document
#+end_src

** Graph Styling

Let's make the graph more polished

#+begin_src elisp
(custom-set-variables
'(org-roam-graph-edge-extra-config (quote (("color" . "grey"))))
 '(org-roam-graph-node-extra-config
   (quote
    (("style" . "rounded")
     ("fillcolor" . "snow")
     ("overlap" . "compress")
     ("fontname" . "Ubuntu Condensed")
     ("fontcolor" . "slategrey")
     ("shape" . "box")
     ("color" . "steelblue")))))
#+end_src

** Capture Templates

#+begin_src elisp
(setq template-message (concat "#+filetags: 2021w34\n"
                               "#+startup: overview\n\n\n"
                               "* Tasks [/]\n"
                               "- [ ] Capture Next AI!\n"
                               "* Links\n"
                               "* Capture\n\n"))

(setq org-roam-capture-templates
      '(("d" "default" plain #'org-roam-capture--get-point
         "%?"
         :file-name "${slug}"
         :head "#+title: ${title}\n\n"
         :unnarrowed t)))

(setq org-roam-dailies-capture-templates
          (let ((head "#+title: %<%Y-%m-%d>\n#+date: <%<%Y-%m-%d %H:%M>>\n%(message template-message)"))
            `(("s" "sandpit" entry
               #'org-roam-capture--get-point
               "* %<%H:%M> %?"
               :file-name "daily/%<%Y-%m-%d>"
               :head ,head
               :olp ("Capture"))
              ("t" "do today" item
               #'org-roam-capture--get-point
               "[ ] %(princ as/agenda-captured-link)"
               :file-name "daily/%<%Y-%m-%d>"
               :head ,head
               :olp ("Do Today")
               :immediate-finish t)
              ("m" "maybe do today" item
               #'org-roam-capture--get-point
               "[ ] %(princ as/agenda-captured-link)"
               :file-name "daily/%<%Y-%m-%d>"
               :head ,head
               :olp ("Maybe Do Today")
               :immediate-finish t))))
#+end_src

* Setting Theme and Fonts

#+BEGIN_SRC elisp :results silent
;; I think these settings are only called on (doom/reload-theme)
;; I wonder how we can ensure these get 'reloaded'
(setq doom-theme 'doom-dark+
;; (setq doom-theme 'doom-gruvbox
      doom-font (font-spec :family "Fira Code Nerd Font Mono" :size 18)
      doom-serif-font (font-spec :family "Fira Code Nerd Font Mono" :size 18)
      doom-variable-pitch-font (font-spec :family "Fira Code Nerd Font Mono" :size 18)
      doom-unicode-font (font-spec :family "Input Mono Narrow" :size 18)
      doom-big-font (font-spec :family "Fira Code Nerd Font Mono" :size 18)
      )
#+END_SRC

#+BEGIN_SRC elisp :results silent
(add-hook 'org-mode-hook (lambda ()
  "Beautify Org Checkbox Symbol"
  (push '("[ ]" . "☐") prettify-symbols-alist)
  (push '("[X]" . "☑" ) prettify-symbols-alist)
  (push '("[-]" . "❍" ) prettify-symbols-alist)
  (prettify-symbols-mode)))
#+END_SRC


#+BEGIN_SRC elisp :tangle packages.el
(package! ore
  :recipe (:local-repo "local/ore"
           :build (:not compile)))
#+END_SRC

#+BEGIN_SRC elisp
(use-package! ore
  :after org)
#+END_SRC

#+BEGIN_SRC elisp
(display-time-mode 1)
#+END_SRC
